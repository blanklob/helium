/* ==========================================================================
   ## BASE THEME BREAKPOINTS SETTINGS
   ========================================================================== */

@use "sass:map";
@use "sass:list";

/// @content This core file sets up reponsive breakpoints.
/// These are the same breakpoints that are used in reponsive
/// utility classes like .hide@md or .u-1/4@s etc
///
/// @throw
///   Global variable name must always start with '$theme-' prefix/namespace.
///
/// @type Map
/// @access public
///
/// Add as you wish.
$theme-breakpoints: (
  // Dont remove base!
  'base': 0px,
  'xs': 320px,
  's': 500px,
  'md': 800px,
  'l': 1025px,
  'xl': 1200px,
  'xxl': 1440px
) !default;

/// @type Map
/// @access public
///
$theme-breakpoints-queries: ();

/// @type List
/// @access public
///
$theme-breakpoints-keys: map.keys($theme-breakpoints);

/// @content The loop below generates a map of queries,
/// based on @see $theme-breakpoints breakpoints.
///
///
/// @output
///   "xs":     "screen and (min-width: 320px) and (max-width: 499px)",
///   "from-l": "screen and (min-width: 1025px)",
///
/// @throw
///   Do not edit this loop directly.
///
@each $alias, $breakpoint in $theme-breakpoints {
  $alias-order: list.index($theme-breakpoints-keys, $alias);
  @if $alias-order == 1 {
    $theme-breakpoints-queries: map.set(
      $theme-breakpoints-queries,
      $alias,
      'screen and (max-width: #{map.get($theme-breakpoints, list.nth($theme-breakpoints-keys, 2)) - 1})'
    );
  } @else if $alias-order == list.length($theme-breakpoints-keys) {
    $theme-breakpoints-queries: map.set(
      $theme-breakpoints-queries,
      $alias,
      'screen and (min-width: #{$breakpoint})'
    );
  } @else {
    $theme-breakpoints-queries: map.set(
      $theme-breakpoints-queries,
      'from-#{$alias}',
      'screen and (min-width: #{$breakpoint})'
    );
    $theme-breakpoints-queries: map.set(
      $theme-breakpoints-queries,
      'to-#{$alias}',
      'screen and (max-width: #{map.get($theme-breakpoints, list.nth($theme-breakpoints-keys, $alias-order + 1)) - 1})'
    );
  }
}

// @debug $theme-breakpoints-queries;
